typedef ubyte GUID[16] <read=ReadGUID>;
typedef ubyte Node[16] <read=ReadGUID>;

string ReadGUID(GUID id)
{
    string sGUID;

    SPrintf(sGUID, "{%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}",
        id[3], id[2], id[1], id[0], id[5], id[4], id[7], id[6], id[8], id[9], id[10], id[11],
        id[12], id[13], id[14], id[15]);
    return sGUID;
}

typedef enum <short> {
    LittleEndian = 0xFFFE
}ByteOrder1;

typedef enum <short> {
    BigEndian = 0xFFFE
}ByteOrder2;

typedef enum <ubyte>{
    Empty = 0x00,
    Storage = 0x01,
    Stream = 0x02,
    LockBytes = 0x03,
    Property = 0x04,
    RootStorage = 0x05
}DirectoryType;

typedef enum <ubyte>{
    Red = 0x00,
    Black = 0x01
}NodeColor;

typedef struct {
    char Signature[8];
    GUID CLSID;
    short MinorVersion;
    short MajorVersion;
    if(flag == 1){
        ByteOrder1 byteorder <format=hex>;
    }
    else{
        ByteOrder2 byteorder <format=hex>;
    }
    short SectorShift;
    short SBAT;
    short Reserved1;
    uint Reserved2;
    uint DirectorySector;
    uint FATSector;
    uint SECID;
    uint TransactionSignature;
    uint MiniStreamCutoffSize;
    uint MiniFATLocation;
    uint MiniFAT;
    uint First_DIFAT_Sector_Location;
    uint DIFATSector;
    uint FAT_N_Location[109];
}FileHeader;

typedef struct{
    int Depot[128];
}BBATArray;

typedef struct{
    wchar_t DirectoryEntryName[32];
    ushort NameLength;
    DirectoryType Type;
    NodeColor Color;
    uint LeftNode;
    uint RightNode;
    uint ChildNode;
    Node CLSID;
    uint UserFlag;
    FILETIME CreationTime;
    FILETIME ModifyTime;
    uint StartSectorID;
    uint SizeofLow;
    uint SizeofHigh;
}Directory;

typedef struct{

    local int num1;
    for(num1=0; num1<4; num1++)
        Directory array;
}RootStorageArray;

typedef struct{
    uint MediaType;
    uint PartitionStatus;
    local int num2;
    for(num2=0;num2<126; num2++)
        uint Cluster;

}MiniFAT<size=512>;

local int flag;
FSeek(28);
if(ReadUByte(FTell()) == 0xFE){
    LittleEndian();
    flag=1;

}else{
    BigEndian();
    flag=0;
}

FSeek(0);     
FileHeader header;
FSeek((header.FAT_N_Location[0]+0x01)*0x200);
BBATArray bbat;
RootStorageArray RootStorage;
FSeek((header.MiniFATLocation+1)*512);
MiniFAT minifat;
